using System.Collections;
using System.Collections.Generic;
using UnityEditor.Experimental.GraphView;
using UnityEngine;

public class Torpedo : MonoBehaviour
{
    [SerializeField] private Transform target;
    [SerializeField] private float propulsionForce = 1000;
    [SerializeField] private float rotationForce = 100;
    private Rigidbody attachedRB;
    private PIDController rotationPID;
    [SerializeField] private float p, i, d;
    private bool active;
    [SerializeField] private ParticleSystem rocketParticles;

    [SerializeField] private LayerMask ignoreLayers;
    [SerializeField] private ParticleSystem explosionParticles;
    [SerializeField] private float explosionRadius = 15f;
    [SerializeField] private float explosionForce = 100f;

    [SerializeField] private bool nonVRActivate;

    private Vector3 lastTargetVelocity;
    private Vector3 targetAcceleration;

    private Vector3 lastVelocity;
    private Vector3 acceleration;

    private Vector3 futureTargetPosition;

    private void Start()
    {
        attachedRB = GetComponent<Rigidbody>();
        rotationPID = new PIDController(p, i, d);
    }

    private void FixedUpdate()
    {
        if (nonVRActivate)
        {
            nonVRActivate = false;
            if(target != null)
                StartCoroutine(ActivateRoutine(0));
        }
        if (active)
        {
            if (target != null)
            {
                Vector3 targetVelocity = target.TryGetComponent<Rigidbody>(out var targetRB) ? targetRB.velocity : Vector3.zero;

                targetAcceleration = (targetVelocity - lastTargetVelocity) / Time.fixedDeltaTime;
                acceleration = (attachedRB.velocity - lastVelocity) / Time.fixedDeltaTime;
                Vector3 relativePosition = target.position - transform.position;
                Vector3 relativeVelocity = targetVelocity - attachedRB.velocity;
                Vector3 relativeAcceleration = targetAcceleration - acceleration;

                float torpedoSpeed = attachedRB.velocity.sqrMagnitude;
                float predictionTime = relativePosition.sqrMagnitude / torpedoSpeed;
                Debug.Log($"{predictionTime} vs {relativePosition.magnitude / attachedRB.velocity.magnitude}");
                for (int i = 0; i < 8; i++)
                {
                    Vector3 predictedRelativePosition = relativePosition + (relativeVelocity * predictionTime) + (0.5f * predictionTime * predictionTime * relativeAcceleration);
                    predictionTime = predictedRelativePosition.sqrMagnitude / torpedoSpeed;
                }

                futureTargetPosition = target.position + (relativeVelocity * predictionTime) + (0.5f * predictionTime * predictionTime * relativeAcceleration);
                Vector3 targetDirection = (futureTargetPosition - transform.position).normalized;

                Vector3 rotationError = targetDirection - transform.forward;
                //transform.rotation = Quaternion.RotateTowards(transform.rotation, Quaternion.LookRotation(targetDirection, Vector3.up), Time.fixedDeltaTime * rotationForce);
                Debug.Log(rotationError);
                float torqueX = Mathf.Clamp(rotationPID.GetOutput(rotationError.x, Time.fixedDeltaTime), -rotationForce, rotationForce);
                float torqueY = Mathf.Clamp(rotationPID.GetOutput(rotationError.y, Time.fixedDeltaTime), -rotationForce, rotationForce);
                float torqueZ = Mathf.Clamp(rotationPID.GetOutput(rotationError.z, Time.fixedDeltaTime), -rotationForce, rotationForce);
                attachedRB.AddTorque(new Vector3(torqueX, torqueY, torqueZ), ForceMode.Acceleration);

                if (rotationError.sqrMagnitude < 2)
                    attachedRB.AddForce(transform.forward * propulsionForce, ForceMode.Acceleration);

                lastTargetVelocity = targetVelocity;
                lastVelocity = attachedRB.velocity;
            }
            else
            {
                attachedRB.AddForce(transform.forward * propulsionForce, ForceMode.Acceleration);
            }
        }
        else
        {
            if (rocketParticles.isPlaying)
                rocketParticles.Stop();
        }
    }

    public void Activate(Rigidbody rigidbody, Transform target, float delay)
    {
        attachedRB = rigidbody;
        this.target = target;
        rotationPID = new PIDController(p, i, d);
        translationPID = new PIDController(p, i, d);
        StartCoroutine(ActivateRoutine(delay));
    }

    private IEnumerator ActivateRoutine(float delay)
    {
        yield return new WaitForSeconds(delay);
        rocketParticles.Play();
        active = true;
        GetComponent<Collider>().enabled = true;
    }

    public void Detonate()
    {
        Instantiate(explosionParticles, transform.position, transform.rotation);
        Collider[] colliders = new Collider[16];
        int hits = Physics.OverlapSphereNonAlloc(transform.position, explosionRadius, colliders, ~ignoreLayers);
        for (int i = 0; i < hits; i++)
        {
            if(colliders[i].TryGetComponent<Rigidbody>(out var otherRB))
            {
                otherRB.AddExplosionForce(explosionForce, transform.position, explosionRadius, 0, ForceMode.Impulse);
            }
        }
        Destroy(gameObject);
    }

    private void OnCollisionEnter(Collision collision)
    {
        Detonate();
    }

    private void OnTriggerEnter(Collider other)
    {
        if(other.transform == target)
        {
            Detonate();
        }
    }
}
